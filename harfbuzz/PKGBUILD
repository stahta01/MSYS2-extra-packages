# Contributor: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>

_realname=harfbuzz
pkgbase=${_realname}
pkgname=("${_realname}"
         "${_realname}-cairo"
         "${_realname}-icu"
         "${_realname}-utils")
         #"${_realname}-docs") # had build/install error likely missing depends
pkgver=10.1.0
pkgrel=2
pkgdesc="OpenType text shaping engine"
arch=('i686' 'x86_64')
url="https://github.com/harfbuzz/harfbuzz"
msys2_references=(
  "archlinux: harfbuzz"
  "cpe: cpe:/a:harfbuzz_project:harfbuzz"
)
license=('spdx:MIT')
makedepends=('gcc'
             'meson'
             'pkgconf'
             'python'
             'gtk-doc'
             'icu-devel'
             'gettext-devel'
             'glib2-devel'
             'libexpat-devel' # needed to find freetype
             'brotli-devel'   # needed to find freetype
             'cairo'
             #$([[ ${CARCH} == i686 ]] || echo "chafa")
             'ragel')
depends=('freetype'
         'gcc-libs'
         'gettext'
         'glib2'
         'graphite2')
#checkdepends=("python-fonttools"
              #"python-setuptools")
source=("https://github.com/harfbuzz/harfbuzz/releases/download/${pkgver}/harfbuzz-${pkgver}.tar.xz"
        "001-fix-build-with-chafa.patch")
sha256sums=('6ce3520f2d089a33cef0fc48321334b8e0b72141f6a763719aaaecd2779ecb82'
            '26b37a1ca9872973905ecb96bcbe3f054472252320956faa74428206900d360e')
noextract=("harfbuzz-${pkgver}.tar.xz")

prepare() {
  echo "Extracting harfbuzz-${pkgver}.tar.xz..."
  tar -xJf harfbuzz-${pkgver}.tar.xz || true

  cd ${_realname}-${pkgver}
  patch -p1 -i "${srcdir}"/001-fix-build-with-chafa.patch
}

build() {
  local -a _static_flags=(
    -DGIO_STATIC_COMPILATION
    -DGLIB_STATIC_COMPILATION
    -DGMODULE_STATIC_COMPILATION
    -DGOBJECT_STATIC_COMPILATION
    -DGRAPHITE2_STATIC
    -DCAIRO_WIN32_STATIC_BUILD
  )

  declare -a _extra_config
  #if [[ ${CARCH} != i686 ]]; then
    #_extra_config+=("-Dchafa=enabled")
  #else
    _extra_config+=("-Dchafa=disabled")
  #fi

  CFLAGS+=" ${_static_flags[@]}" \
  CXXFLAGS+=" ${_static_flags[@]}" \
  ${MSYSTEM_PREFIX}/bin/meson setup \
    --prefix="${MSYSTEM_PREFIX}" \
    --buildtype plain \
    --wrap-mode=nofallback \
    --default-library=static \
    -Dauto_features=enabled \
    -Dintrospection=disabled \
    -Dgobject=enabled \
    -Dicu=enabled \
    -Dgdi=enabled \
    -Dgraphite=enabled \
    -Ddirectwrite=enabled \
    -Dtests=disabled \
    -Ddocs=disabled \
    "${_extra_config[@]}" \
    "build-${MSYSTEM_CARCH}-static" \
    "${_realname}-${pkgver}"

  ${MSYSTEM_PREFIX}/bin/meson compile -C "build-${MSYSTEM_CARCH}-static"

  ${MSYSTEM_PREFIX}/bin/meson setup \
    --prefix="${MSYSTEM_PREFIX}" \
    --buildtype plain \
    --wrap-mode=nofallback \
    --default-library=shared \
    -Dauto_features=enabled \
    -Dintrospection=disabled \
    -Dgobject=enabled \
    -Dicu=enabled \
    -Dgdi=enabled \
    -Dgraphite=enabled \
    -Ddirectwrite=enabled \
    -Dtests=disabled \
    -Ddocs=disabled \
    "${_extra_config[@]}" \
    "build-${MSYSTEM_CARCH}-shared" \
    "${_realname}-${pkgver}"

  ${MSYSTEM_PREFIX}/bin/meson compile -C "build-${MSYSTEM_CARCH}-shared"
}

#check(){
  #cd "${srcdir}/build-${MSYSTEM_CARCH}-shared"
  #${MSYSTEM_PREFIX}/bin/meson setup -Dtests=enabled ../${_realname}-${pkgver}
  #${MSYSTEM_PREFIX}/bin/meson compile
  #${MSYSTEM_PREFIX}/bin/meson test
#}

package_harfbuzz() {

  ${MSYSTEM_PREFIX}/bin/meson install -C "build-${MSYSTEM_CARCH}-static" --destdir "${pkgdir}"

  ${MSYSTEM_PREFIX}/bin/meson install -C "build-${MSYSTEM_CARCH}-shared" --destdir "${pkgdir}"

  #mkdir -p dest-docs${MSYSTEM_PREFIX}/share
  #mv "${pkgdir}"${MSYSTEM_PREFIX}/share/gtk-doc dest-docs${MSYSTEM_PREFIX}/share/gtk-doc

  mkdir -p dest-utils${MSYSTEM_PREFIX}/bin
  mv "${pkgdir}"${MSYSTEM_PREFIX}/bin/*.exe dest-utils${MSYSTEM_PREFIX}/bin/

  mkdir -p dest-cairo${MSYSTEM_PREFIX}/bin
  mkdir -p dest-cairo${MSYSTEM_PREFIX}/include/harfbuzz/
  mkdir -p dest-cairo${MSYSTEM_PREFIX}/lib/pkgconfig
  mv "${pkgdir}"${MSYSTEM_PREFIX}/bin/msys-harfbuzz-cairo*.dll dest-cairo${MSYSTEM_PREFIX}/bin/
  mv "${pkgdir}"${MSYSTEM_PREFIX}/include/harfbuzz/hb-cairo.h dest-cairo${MSYSTEM_PREFIX}/include/harfbuzz/
  mv "${pkgdir}"${MSYSTEM_PREFIX}/lib/libharfbuzz-cairo*.a dest-cairo${MSYSTEM_PREFIX}/lib/
  mv "${pkgdir}"${MSYSTEM_PREFIX}/lib/pkgconfig/harfbuzz-cairo.pc dest-cairo${MSYSTEM_PREFIX}/lib/pkgconfig/

  mkdir -p dest-icu${MSYSTEM_PREFIX}/bin
  mkdir -p dest-icu${MSYSTEM_PREFIX}/include/harfbuzz/
  mkdir -p dest-icu${MSYSTEM_PREFIX}/lib/pkgconfig
  mv "${pkgdir}"${MSYSTEM_PREFIX}/bin/msys-harfbuzz-icu*.dll dest-icu${MSYSTEM_PREFIX}/bin/
  mv "${pkgdir}"${MSYSTEM_PREFIX}/include/harfbuzz/hb-icu.h dest-icu${MSYSTEM_PREFIX}/include/harfbuzz/
  mv "${pkgdir}"${MSYSTEM_PREFIX}/lib/libharfbuzz-icu*.a dest-icu${MSYSTEM_PREFIX}/lib/
  mv "${pkgdir}"${MSYSTEM_PREFIX}/lib/pkgconfig/harfbuzz-icu.pc dest-icu${MSYSTEM_PREFIX}/lib/pkgconfig/

  install -Dm644 "${srcdir}"/${_realname}-${pkgver}/COPYING \
    "${pkgdir}"${MSYSTEM_PREFIX}/share/licenses/${_realname}/COPYING
}

package_harfbuzz-cairo() {
  pkgdesc+=" - Cairo integration"
  depends=("harfbuzz"
           "cairo")

  mv dest-cairo/* "${pkgdir}"
}

package_harfbuzz-icu() {
  pkgdesc+=" - ICU integration"
  depends=("harfbuzz"
           "icu")

  mv dest-icu/* "${pkgdir}"
}

package_harfbuzz-utils() {
  pkgdesc+=" - Utilities"
  depends=("harfbuzz"
           "harfbuzz-cairo"
           "cairo"
          #$([[ ${CARCH} == i686 ]] || echo "chafa")
          )

  mv dest-utils/* "${pkgdir}"
}

package_harfbuzz-docs() {
  pkgdesc+=" - Documentation"
  depends=()
  optdepends=()

  mv dest-docs/* "${pkgdir}"
}

# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
